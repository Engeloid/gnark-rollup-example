
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/// @title Groth16 verifier template.
/// @author Remco Bloemen
/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed
/// (256 bytes) and compressed (128 bytes) format. A view function is provided
/// to compress proofs.
/// @notice See <https://2π.com/23/bn254-compression> for further explanation.
contract Verifier {
    
    /// Some of the provided public input values are larger than the field modulus.
    /// @dev Public input elements are not automatically reduced, as this is can be
    /// a dangerous source of bugs.
    error PublicInputNotInField();

    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;

    // Extension field Fp2 = Fp[i] / (i² + 1)
    // Note: This is the complex extension field of Fp with i² = -1.
    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.
    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which
    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which
    //       Fp2 elements are encoded in the public interface as this became convention.

    // Constants in Fp
    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;
    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;
    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2
    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;

    // Groth16 alpha point in G1
    uint256 constant ALPHA_X = 20538593074791402444331076306654822710231959796953575099597213339623952117025;
    uint256 constant ALPHA_Y = 14245484618070444663955040545308731623229883086821649656601986813469628848870;

    // Groth16 beta point in G2 in powers of i
    uint256 constant BETA_NEG_X_0 = 6043312776560005367672608635847357971918786101255782968991644642787692266614;
    uint256 constant BETA_NEG_X_1 = 4774949901410239501203184611765294854685290857345249898876430759456563086102;
    uint256 constant BETA_NEG_Y_0 = 16055286086061409745641748155137766003363013050142089065970118248688677286294;
    uint256 constant BETA_NEG_Y_1 = 12729704453986184003167753896657657697492295015116552566490916089146194927558;

    // Groth16 gamma point in G2 in powers of i
    uint256 constant GAMMA_NEG_X_0 = 5552390883126753435163740441578478814354669202729460800285810272807134467726;
    uint256 constant GAMMA_NEG_X_1 = 11788389532556295661383098393979610330197342927912547472827089630108398145970;
    uint256 constant GAMMA_NEG_Y_0 = 10417148473428778943546962513083566460838518439489556124970556412786837463402;
    uint256 constant GAMMA_NEG_Y_1 = 9340431202436170314003184726039939620763982517119403163485066760346402353625;

    // Groth16 delta point in G2 in powers of i
    uint256 constant DELTA_NEG_X_0 = 1955585707980946656775384497721231100716016455748713621998857449939808532672;
    uint256 constant DELTA_NEG_X_1 = 7559921086705850132143282733783630660947090766535616824071162754804450892027;
    uint256 constant DELTA_NEG_Y_0 = 8281568651128609114797412660877769465068358209410443457833272474277130030234;
    uint256 constant DELTA_NEG_Y_1 = 18046206601699374881385362276577240251428923202033286208252807410069726577905;

    // Constant and public input points
    uint256 constant CONSTANT_X = 18656753123257550423442835661499471921042191309614554217093296541977167963251;
    uint256 constant CONSTANT_Y = 10019422995691515796962351646004473873120693703099066592136929023708532127820;
    uint256 constant PUB_0_X = 8675876957920337864382638108754527261972575952627245496941043559488702146255;
    uint256 constant PUB_0_Y = 17029479379393867010375422462223090915041661478514053564665585710880607660831;
    uint256 constant PUB_1_X = 11138279155871279744736348219782255075518580034630554140135559610562794919430;
    uint256 constant PUB_1_Y = 20138224802687639309897222345643650850633948718049409929059065258365821190590;
    uint256 constant PUB_2_X = 9516548731174672932001565305102231523040677295320860246786237714868487142444;
    uint256 constant PUB_2_Y = 15963156260116360552142246194041884107777727902709628520945715183355810029723;
    uint256 constant PUB_3_X = 4544796367811266628555088439470052965052114790099110367016336199327877978753;
    uint256 constant PUB_3_Y = 21621384353409750108066785720009919601905204266393912380455382335812623498446;
    uint256 constant PUB_4_X = 6319821875856102379467810156225028079321785605801630417348799241908923046899;
    uint256 constant PUB_4_Y = 389728923342379855835026774288358457242459561906906609564430298685494160455;
    uint256 constant PUB_5_X = 11241318774201966935057330085589720039792937694415876728944880466575018757683;
    uint256 constant PUB_5_Y = 8214010161529331011368263260549582121465786268513009846762287042726993410280;
    uint256 constant PUB_6_X = 14429681311642915890855446494796528179109985935996090926579866614213686913502;
    uint256 constant PUB_6_Y = 12317912466680493500826998772969720486348163085059179415864621358982779630925;
    uint256 constant PUB_7_X = 1848038649906847885262690442366359437102222608118051520706933381269088409063;
    uint256 constant PUB_7_Y = 11294395918574492174144337893505517808052998957453456914296446443241994139691;
    uint256 constant PUB_8_X = 11710931240615050195688098252377057730021276029736271987170683500178623620922;
    uint256 constant PUB_8_Y = 9157243737681957803651390082674496148187223220810510955315935911205445310082;
    uint256 constant PUB_9_X = 4845280304227147153341976399443678106571427815124156337762498425025385047446;
    uint256 constant PUB_9_Y = 13960904107830658563690387776062136450354371329928514512517383221954065607242;
    uint256 constant PUB_10_X = 5486334400723754492759319464255914768401705604884283617026383454692167442187;
    uint256 constant PUB_10_Y = 10877413068160967407591261712557801023757051533887461839674061740281672548743;
    uint256 constant PUB_11_X = 16124291403886860632658299756387744228617956000757486695216258153379447776816;
    uint256 constant PUB_11_Y = 3013556219144463321737906370960890883530029003932575868600359104300047843309;
    uint256 constant PUB_12_X = 1904777638330564993660531059663274704757005477835648310236676605127754409719;
    uint256 constant PUB_12_Y = 10803561906669780466605555961893258691918283040266803666392369958455356812036;
    uint256 constant PUB_13_X = 11904953257476467751077940262717966410307810144405651160268069576797691913331;
    uint256 constant PUB_13_Y = 17254298757830046945669015560566356534297242766627935932155596924390422052336;
    uint256 constant PUB_14_X = 3038967258680636831710396602296307555172985741240587394937467743012594113426;
    uint256 constant PUB_14_Y = 14625759391161502439506081382423872866689779783084608695342036578736093127817;
    uint256 constant PUB_15_X = 10271276138112214142322263367930060734871689197359008276983441617503297359035;
    uint256 constant PUB_15_Y = 13184861384435734915930560814069783229176150453082182949996399226159857435619;
    uint256 constant PUB_16_X = 15680261896009345062487577553291201368580002249966946578272987088418960430305;
    uint256 constant PUB_16_Y = 11894131031691760930762243597480168799138308604646700253176614949194019805477;
    uint256 constant PUB_17_X = 11404087037668020005169645666807398083296729988865200360054414008124767137818;
    uint256 constant PUB_17_Y = 490896437723675684234968931654527946643929608925631677591157762515280536307;
    uint256 constant PUB_18_X = 16133055735700774731019588382208823242517266960219808110584962825751941388152;
    uint256 constant PUB_18_Y = 6027509800449967500540399642800447051711949750427838692786806243349868837939;
    uint256 constant PUB_19_X = 16175838121755270239720040714250099407277936892925710772564405805777312201708;
    uint256 constant PUB_19_Y = 1863237411110875673898927037250492076430843225219989039778113109723441894510;
    uint256 constant PUB_20_X = 13596624987818594454128612688422574420583025893454553684715637979646978016806;
    uint256 constant PUB_20_Y = 2436657875789013221855104308313049761697957360130636654781142374953404807592;
    uint256 constant PUB_21_X = 19654555593784781597242266067346056877467803608308225709514558406793559807160;
    uint256 constant PUB_21_Y = 17165729983901353889985149174503877186502827181518680161228971052266110274782;
    uint256 constant PUB_22_X = 10549509668466539263551548421519190370923728077891422621067680916032781801327;
    uint256 constant PUB_22_Y = 18637251363460950233202910896247820380771973350838665746214210864581762167109;
    uint256 constant PUB_23_X = 17646019131540310338012398725535705598523487039556851172865255013189184769916;
    uint256 constant PUB_23_Y = 6910172745439720368867494894287628308417174982395489593930553548314063583853;
    uint256 constant PUB_24_X = 16897440258574033214130962985692749543195526359849139917202546569663864696798;
    uint256 constant PUB_24_Y = 19203458903242230541995722647284000131485719775435850043551829716507891258908;
    uint256 constant PUB_25_X = 15120498671454020747106992606601374126066741728334763331090015566147256646286;
    uint256 constant PUB_25_Y = 17571766832026087706616883437962925335129833736215583857548542392664733157201;
    uint256 constant PUB_26_X = 996635856527705293289237236285685620164070699572936059848891439404980762438;
    uint256 constant PUB_26_Y = 227786264927540928361397431225489023526364780400730648359775762420996554725;
    uint256 constant PUB_27_X = 11455610113276688601610420246087355306757536190049440710308630501430718084715;
    uint256 constant PUB_27_Y = 4351151763071041372326381281187789150544690924889663132768544824227650675435;
    uint256 constant PUB_28_X = 15857016492653147110878651457708994336274736490606625867068704579449851337814;
    uint256 constant PUB_28_Y = 4471722204491410868507619384432209556179880020234120161890052753968968492001;
    uint256 constant PUB_29_X = 5461869895642572728257674670559289442666522565589113517881034248859344630891;
    uint256 constant PUB_29_Y = 4883842342503268892487476338486867517570157316221246331558278684739396224053;
    uint256 constant PUB_30_X = 17917582343401523104751037879407684029924845203449186559822171888873408218532;
    uint256 constant PUB_30_Y = 5322601097136932441302306174780236469455401483709167771501771328203686409216;
    uint256 constant PUB_31_X = 21681467054322923122736952276057382931202008660320101118288094820014104132640;
    uint256 constant PUB_31_Y = 9007051147489518480184311559970513191097236787054390639619954452873039035326;
    uint256 constant PUB_32_X = 11581249075142498371880795462970258838634346329000357771627395159683166668158;
    uint256 constant PUB_32_Y = 3850027306096834874450427175480178179701159067794416747296987590522598343000;
    uint256 constant PUB_33_X = 17171250177193484407827984540633857594944188895723508903185189897550551530612;
    uint256 constant PUB_33_Y = 12554785421233298600653923205841339961891956499571482772303104411638590518625;
    uint256 constant PUB_34_X = 19976398379133904835268736108079124517483828942050919816184054569296738757270;
    uint256 constant PUB_34_Y = 13581764863014375404436957932073628918219008408136645242576657143156230329815;
    uint256 constant PUB_35_X = 2830926487641747522924166962912195699195345140518063753001547973058176992557;
    uint256 constant PUB_35_Y = 3795018748217098139460507524730699016865734157562877258575358831233074833593;
    uint256 constant PUB_36_X = 18952846453750748191988774533573172262349643405893153980562762293729139143701;
    uint256 constant PUB_36_Y = 2885682788677363984356831716189232265351168859904127010469971629146135449942;
    uint256 constant PUB_37_X = 7515473334691137774124274158714335139713718140380146147323391016845526673089;
    uint256 constant PUB_37_Y = 18122398595495034764568294156296109408221855589711806456930953265603274018045;
    uint256 constant PUB_38_X = 15023798831639792954638621484786180327569572534595022023285134378462228973977;
    uint256 constant PUB_38_Y = 12768334490843929443982421305262699241412518373794251553962075623345804627818;
    uint256 constant PUB_39_X = 17165684866363728919561956169621351164770138040160685416213532172905218713559;
    uint256 constant PUB_39_Y = 18608538916346846844724349804352305982424456745242480457383766081530135985533;
    uint256 constant PUB_40_X = 20814485583378280554452922205981114960730849173799173943149474483004101454267;
    uint256 constant PUB_40_Y = 20179626996774512615277310054102663183551427785499281311149823962194750691412;
    uint256 constant PUB_41_X = 11581535571194550206845658219313199646878525249524815737414288101705478438417;
    uint256 constant PUB_41_Y = 9938514176482670183761371890509914728874458797196619919317004148441947538764;
    uint256 constant PUB_42_X = 9385879311626592366757395964848378784860699358441518678421460552116034491148;
    uint256 constant PUB_42_Y = 8591536730735729492350963407102666279963295798451658322419674462172072585686;
    uint256 constant PUB_43_X = 5194902145766564646706721495219552033817684777532632870334008474246128972591;
    uint256 constant PUB_43_Y = 12738451369762194059752220430266755394777835613214484400384881286372948353284;
    uint256 constant PUB_44_X = 20008545572480909362619146114741258000992147425701889675443222869703453709237;
    uint256 constant PUB_44_Y = 14057319752771337362929177084428804525746017231923197415732837905997315235392;
    uint256 constant PUB_45_X = 125560651261101986134476908263803843991655932990208179264354444613207582277;
    uint256 constant PUB_45_Y = 6254995182762996495159719490952176713157515149459109992676797080792300168999;
    uint256 constant PUB_46_X = 2554071010834100870499294785519230889239463626841687548454103174207115489031;
    uint256 constant PUB_46_Y = 17594944509347413441502360302083016233064273271827669388376134405158538141731;
    uint256 constant PUB_47_X = 4694519764940417418152225625583253829785179241530904011363944342506515957228;
    uint256 constant PUB_47_Y = 17959802429723989624091608286640446692467246708797333823130172063266930224152;
    uint256 constant PUB_48_X = 12346600139132355899287673829478802411397249714406763653764129526710983338807;
    uint256 constant PUB_48_Y = 14666500062319278820629900421657581087003964338474591910786862758415533916765;
    uint256 constant PUB_49_X = 17642580040934308968774616105514861372705013271769205641182879500844919532074;
    uint256 constant PUB_49_Y = 14309020475688775078210890630788849443294168192383479778260377592481466761820;
    uint256 constant PUB_50_X = 5513122743623076049691133525652475763752495385850452502025855493498071305286;
    uint256 constant PUB_50_Y = 13038435124772502006787285842445251538349509987396143377877503087743947459020;
    uint256 constant PUB_51_X = 9336892235592305255974953143261013764696087487438058736104083823228792713429;
    uint256 constant PUB_51_Y = 989039595679677468426552381065773830544029909322395626375266311327255391464;
    uint256 constant PUB_52_X = 11093641930781237921106256502537188885164239226811978373648205572061152395388;
    uint256 constant PUB_52_Y = 170308635202020253235114266950450343612306771376196859055061647681162644356;
    uint256 constant PUB_53_X = 21778742216604638892938078962972829135660871112111716331154635621187506247568;
    uint256 constant PUB_53_Y = 12039789827409615267669765052147807576590848569617361832563766457172282363995;
    uint256 constant PUB_54_X = 7111301364545921298258130217926088905330930302015258969835331485292673475679;
    uint256 constant PUB_54_Y = 11152440152139113166902158481568728035960153277398438870204034245138689645542;
    uint256 constant PUB_55_X = 12099165337692964851317397091088196136195541990756097604334072936615921872455;
    uint256 constant PUB_55_Y = 7423304553786850684777000393385851450627206253645057065620836482984230300336;
    uint256 constant PUB_56_X = 9488355293728871441299683700237735853224255473972058213363193702760895008982;
    uint256 constant PUB_56_Y = 7140213360590560527580311700526476611715880618889538030553537955389854114173;
    uint256 constant PUB_57_X = 3317017677428697233858493933960138793727870265050942813777696243620478805267;
    uint256 constant PUB_57_Y = 8014600598505742641502367215129417631634602413273111554245555505714292859194;
    uint256 constant PUB_58_X = 1459650658659385307011173204655850222718381246621673253537372038343057410185;
    uint256 constant PUB_58_Y = 9642248979943450359019361833292963240301437874275588851946667010319845402900;
    uint256 constant PUB_59_X = 11087397298797879946900444562396862992589566968588940268509546250159948221453;
    uint256 constant PUB_59_Y = 6843773576816971911237007615508409901118648379791682448072822783909452851835;
    uint256 constant PUB_60_X = 5085133846283997800954082157029763745415002214879262036133401801121844499821;
    uint256 constant PUB_60_Y = 3053269864874156309904404801568702329069611310693761698423145537902223858012;
    uint256 constant PUB_61_X = 1979881877408853421593283707483603842776308876369472743207616940479542154998;
    uint256 constant PUB_61_Y = 8832929322308501640425273182490604916869720303296936056373828926880212975533;
    uint256 constant PUB_62_X = 19104447873470498293357854868740914343137481361719927644857652797092860797654;
    uint256 constant PUB_62_Y = 1972081006011095778170789509765874520531800467455750199233196078768857601860;
    uint256 constant PUB_63_X = 9768116486818653877931018835602997163469579546331298691212996080991097534000;
    uint256 constant PUB_63_Y = 4998665696888900138233700476269784996749157197554401786607359748327957961418;
    uint256 constant PUB_64_X = 4145950193176276119772438964536733218746430257256400488516345572595094362769;
    uint256 constant PUB_64_Y = 12899569009370565849252271872324133746016009376919382655754960497858233114470;
    uint256 constant PUB_65_X = 1864639072020215001377766873411765508419557592154385933603140219046179177957;
    uint256 constant PUB_65_Y = 4102647912571776011976020760454906619672692898339358016433078613556737369939;
    uint256 constant PUB_66_X = 14598979650296095887125231946017763564452448230571249660361522280973128628695;
    uint256 constant PUB_66_Y = 3936798724407730398182384511827698435986703192174183867242593775772510787181;
    uint256 constant PUB_67_X = 9528080475449996877170169758898072138754931578833900013241244072169938473062;
    uint256 constant PUB_67_Y = 15180378973275770874816985961401554841972924075727343390143846065043426413273;
    uint256 constant PUB_68_X = 2508576952149367184959688049837750957253267583009481952630740102425791553402;
    uint256 constant PUB_68_Y = 6025278706785285111733472330399247460944272674176592587533820568040098842005;
    uint256 constant PUB_69_X = 6760489326023355021503855243401803713620269124745047174426268595512279352923;
    uint256 constant PUB_69_Y = 16140123345176406698577595278560290655608670950310289017737048975560248221031;
    uint256 constant PUB_70_X = 6134726845055064415693722886528234607693748278656800200771562244216930309787;
    uint256 constant PUB_70_Y = 7192827502120616333763672575374576223812571877877432395692408173627044701559;
    uint256 constant PUB_71_X = 16764124785910586805187778435394646112930412638696608477032533287530514898804;
    uint256 constant PUB_71_Y = 1558975196703387983081637423709769455199746122528473978314980640391876015269;
    uint256 constant PUB_72_X = 7285116995089462601818488485567244846275861288881848066122536973848887879828;
    uint256 constant PUB_72_Y = 1057241040589164883695444235494680842145395104608088641667069365906626099650;
    uint256 constant PUB_73_X = 2641021975907544238819235047275508400290334134688695008255427155665504075838;
    uint256 constant PUB_73_Y = 17571172755734123516748255871856850579501375748067609055426438006451859781703;
    uint256 constant PUB_74_X = 15549024853175615102491462117723604029437378811552389526592506941715415830728;
    uint256 constant PUB_74_Y = 10296959900764098686447797240537884207385045539070203517436786510872562617631;
    uint256 constant PUB_75_X = 9934756464598359754118662254824536756967592936215717541893168024437928011123;
    uint256 constant PUB_75_Y = 11786801001070554685765862990847224259273090561942797643785181169023476638748;
    uint256 constant PUB_76_X = 5634357498541639985121819961539483955927447448400079860634159171301254082510;
    uint256 constant PUB_76_Y = 4127673829353881023530846664068449155028227059840600288587073867884306826221;
    uint256 constant PUB_77_X = 11271638066791399853065045671206324714785065190061376982460926780904976653666;
    uint256 constant PUB_77_Y = 10164708169550694541189267141360031464542745591893526035720557758432978444928;
    uint256 constant PUB_78_X = 13988442132349471368520428902908426542093780467937663073228251950589204066004;
    uint256 constant PUB_78_Y = 15611555058655965304627732488265042684842995387473970010655156316051486542933;
    uint256 constant PUB_79_X = 20752767831645234472085156128997997462428469303455479122653970781769331994710;
    uint256 constant PUB_79_Y = 10829898452504061564143607624104235199808271466157447926207082335452209007410;
    uint256 constant PUB_80_X = 13027033771549406211811289907067548001523973373998413181379227115837801637117;
    uint256 constant PUB_80_Y = 19285621887218943550501307991132557844620696600690768190297480636306443269838;
    uint256 constant PUB_81_X = 536022578813554938891483291812611602378788576445460846569278413905383737976;
    uint256 constant PUB_81_Y = 7699935540578017769264952946524965105118673998551870074281632989871807233085;
    uint256 constant PUB_82_X = 9147626670405769187449761944340768339005627182999712422775788361602461186662;
    uint256 constant PUB_82_Y = 14366421759640755390945037221195515662965976758601506590898353589547293148052;
    uint256 constant PUB_83_X = 16127623790681763168563789662635510898372074916694520272722827702925497017884;
    uint256 constant PUB_83_Y = 18621396879677434470545915523560330492813717045134324254426427704899339951951;
    uint256 constant PUB_84_X = 21549471104877408087525914689253907134207514990821128183827353431055916512053;
    uint256 constant PUB_84_Y = 490063882645346542978051961904428663319494273183475442120598614214126900361;
    uint256 constant PUB_85_X = 13185717311534748040801284803109527689752344009085224621450097663046694943825;
    uint256 constant PUB_85_Y = 17223124219614293328208744546100504526055729182228224725741050361154698077820;
    uint256 constant PUB_86_X = 10665773335261602090490263575045859503360447462026893430526051480365379995770;
    uint256 constant PUB_86_Y = 18920857556531366669414295761483921790166813071219993365074576301349627311910;
    uint256 constant PUB_87_X = 6916577139030591808135313042798725409417434195851301075597022916351984851507;
    uint256 constant PUB_87_Y = 15346691202093597372472400561485543877793310062063140202908811897049893055179;
    uint256 constant PUB_88_X = 12662018940926291771415736070247903652227034850334524971020206104397456520927;
    uint256 constant PUB_88_Y = 14727461501041082585164896449859196494163638233990591722332954957861451963625;
    uint256 constant PUB_89_X = 8085305623926798280050880799875074906587675088492211367128464449989038538301;
    uint256 constant PUB_89_Y = 5055284770251268843172826279856237036912308682816708675848601084754068628085;
    uint256 constant PUB_90_X = 5214365468881120433554972240679350461804276626958046251527457874351792245052;
    uint256 constant PUB_90_Y = 16959523911399180200788163284114680585693697998396196854922975147756385459927;
    uint256 constant PUB_91_X = 16779018106928761328251641289919168837352114984608330642237893582260302801092;
    uint256 constant PUB_91_Y = 17545787499559461482025756303615675885149994012736590928803689079330234186581;
    uint256 constant PUB_92_X = 4062359716624917844940394779555100002921337437686406357173090282127204511797;
    uint256 constant PUB_92_Y = 1989817889556677106286161229012750984888359363279314543821259661405593235755;
    uint256 constant PUB_93_X = 12158103145262698567610653612537723649396104217528374024317571955037291481800;
    uint256 constant PUB_93_Y = 7227392774006297265212009356927154365338350467301152904342343426700178627581;
    uint256 constant PUB_94_X = 14730032862338370690784286994632746362222575008911802329027172778410590682797;
    uint256 constant PUB_94_Y = 20128585397481376659230190337680258009670035192326710971299572974042156050163;
    uint256 constant PUB_95_X = 5815121694221222703231371780939461890788088557078111417870149921030294106728;
    uint256 constant PUB_95_Y = 16942250082097575215537606177145962102778529812646646450319912090574103698150;
    uint256 constant PUB_96_X = 16848034806361067098556158443513935644087995317272632528830468021580273893219;
    uint256 constant PUB_96_Y = 9776610128114328762525550362532567332680590852991582789107382490569482682796;
    uint256 constant PUB_97_X = 18679124331570507733401215946452122074534612177401915199851160649427606396239;
    uint256 constant PUB_97_Y = 17165646270366486042431024003506082201198254893399665207051049441312370085894;
    uint256 constant PUB_98_X = 20114152032391994089308452770660386656691202212291775349033960297332516714814;
    uint256 constant PUB_98_Y = 20478634350914473327449020903735263127821079224037714328648324432039432972992;
    uint256 constant PUB_99_X = 16519915668214096318731013286908964939652283856054770594598951322021793572006;
    uint256 constant PUB_99_Y = 14227033973969953729181838337922206821073363690174485824437034002088975713861;
    uint256 constant PUB_100_X = 7950097834520880286854545856101870091582672526397597864252025088486470499262;
    uint256 constant PUB_100_Y = 4115367551717464214419836370901772906611194267916429354096986121838619670926;
    uint256 constant PUB_101_X = 19418761067982999424909690151885888868526271412043541259212668657904757490517;
    uint256 constant PUB_101_Y = 6919782676748074992751335484395302199358050591515216340810071153867181483758;
    uint256 constant PUB_102_X = 10937809068879033110022549340311995710168073093928672408242723973442603158406;
    uint256 constant PUB_102_Y = 17785100414771971057301708989327047970628460308464668862701865136758863310053;
    uint256 constant PUB_103_X = 9605195915859445948616533763631419189366560624533058771541718127675318719345;
    uint256 constant PUB_103_Y = 7892436302274597699042597305429816664561942249428393650891609111984192318364;
    uint256 constant PUB_104_X = 20930701800910499790167034807248409967030296746642737616382115267389250618399;
    uint256 constant PUB_104_Y = 6161060746418077472833682704124969690424816211345475424980237163650948086618;
    uint256 constant PUB_105_X = 21329859969697703168222250747332601820386297816542352745454524638300768734320;
    uint256 constant PUB_105_Y = 20527298136307588862473606579235291856257183327569885411591868203259179489865;
    uint256 constant PUB_106_X = 17495635878605399454258904806554110083068037188217932308246095987990103687005;
    uint256 constant PUB_106_Y = 16196591835068243017235162779036508165494702989778583158870035812613522432190;
    uint256 constant PUB_107_X = 2691105985351548868643307604329347146242574743877111146677950388965892686125;
    uint256 constant PUB_107_Y = 8237702299519391539268227226692605618535351717582393937706578759527010822437;
    uint256 constant PUB_108_X = 10939468722208852072186108613832724806858514307789877002797602865726948518550;
    uint256 constant PUB_108_Y = 15582081325445686933355191187018346252444843101153773263130929472868454940179;
    uint256 constant PUB_109_X = 14196634215864946253372867411268291614012693816450797371526221064400201916301;
    uint256 constant PUB_109_Y = 19290170641565043963458424134034940043402370719018890100375921106596921572118;
    uint256 constant PUB_110_X = 18083944752530358045442128459102000083699121687902806320759438340193502888893;
    uint256 constant PUB_110_Y = 12796332282017468235070776713569495050211564255358580026097911401675216084533;
    uint256 constant PUB_111_X = 19182703495740420022799072374467241831977079090019151724325993085191385958512;
    uint256 constant PUB_111_Y = 9776225772457768735762987659431253678660688991217577344827182089625648648823;
    uint256 constant PUB_112_X = 5248914460711623664392267933054445350075984103082896594082431121893705069232;
    uint256 constant PUB_112_Y = 10292606566959587313653291356160076503838993904205011433800405870537576031628;
    uint256 constant PUB_113_X = 12115993356427811552001416451573470524887867401962359764653629635492343087334;
    uint256 constant PUB_113_Y = 5777515935313654035700771622888720231567911358960356368547504967024686759430;
    uint256 constant PUB_114_X = 5759603086467397650074585878276872762616043867736033555519229871543057845221;
    uint256 constant PUB_114_Y = 2511578623671967572783159841587827395656357492118790087510022351068991869748;
    uint256 constant PUB_115_X = 2378351141771976239267031863060149352601345891541792370575455485712891047418;
    uint256 constant PUB_115_Y = 3104877019283286375299649405427370121615436800999462921438809565667717206033;
    uint256 constant PUB_116_X = 5997199229257784022107331235056229982436872013340932030260241537564656454353;
    uint256 constant PUB_116_Y = 10312471103050543489942202490005108701040687179505671856306006122361690846201;
    uint256 constant PUB_117_X = 21437081433320191088239575639577850242953900539897702698799264956692595134703;
    uint256 constant PUB_117_Y = 12535746840011689653599553666522554225638322275090914153697743675567354497111;
    uint256 constant PUB_118_X = 6202443874640092237930372366131519822312343245036299256183955185823672575493;
    uint256 constant PUB_118_Y = 65261585520464389479342628086861580839950128591921813896541672935400763577;
    uint256 constant PUB_119_X = 9821256020375306027236992833071119529097551927313578044721653736876026360214;
    uint256 constant PUB_119_Y = 1474970204730112905860898016794806873482894347413876807826344602421294224889;
    uint256 constant PUB_120_X = 3745236908190263398454684348790132727627940405097661362087206001899582802543;
    uint256 constant PUB_120_Y = 7611694828128209600479058819088845987390314066651143025689942199257899475613;
    uint256 constant PUB_121_X = 11527868155228404187724588649549937997797285996210354803316043349466504597250;
    uint256 constant PUB_121_Y = 18274362725046261310538379085517338518360541291865967832427504474754288573975;
    uint256 constant PUB_122_X = 5315188195977563885830812874967282282851652928554655506322512456357355545327;
    uint256 constant PUB_122_Y = 20694649187043471202508937014635858818608059567778535590660620944538386124394;
    uint256 constant PUB_123_X = 13197973949503856570306606215012276877577825732626957913537490509663193967744;
    uint256 constant PUB_123_Y = 18371827809052497723060169030953793873070193884615377533689503833923259076649;
    uint256 constant PUB_124_X = 21128757605793123075030531068068916179212075026126453124808551866255014615695;
    uint256 constant PUB_124_Y = 9649181544201705091257982695834108900151433437893070884109190887496354996663;
    uint256 constant PUB_125_X = 2879581942526879788719856966694159789131756822184607830649147546517365746375;
    uint256 constant PUB_125_Y = 4943005684264618217180029337491932879692188841209296613648084155358436757746;
    uint256 constant PUB_126_X = 18763506621124807131138392128566739836491501993716215297621953665304492981506;
    uint256 constant PUB_126_Y = 17080471556396455874018895639324186141805851207024623803512570403816262843994;
    uint256 constant PUB_127_X = 15734508166648334436139957925137587879060363341860717593630403201760750605222;
    uint256 constant PUB_127_Y = 3085126944379672380634331331522784072565654573443799522891935977140891182662;

    /// Negation in Fp.
    /// @notice Returns a number x such that a + x = 0 in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @return x the result
    function negate(uint256 a) internal pure returns (uint256 x) {
        unchecked {
            x = (P - (a % P)) % P; // Modulo is cheaper than branching
        }
    }

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), P)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        } 
    }

    /// Invertsion in Fp.
    /// @notice Returns a number x such that a * x = 1 in Fp.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FP);
        if (mulmod(a, x, P) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    /// Square root in Fp.
    /// @notice Returns a number x such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_SQRT_FP);
        if (mulmod(x, x, P) != a) {
            // Square root does not exist or a is not reduced.
            // Happens when G1 point is not on curve.
            revert ProofInvalid();
        }
    }

    /// Square test in Fp.
    /// @notice Returns wheter a number x exists such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function isSquare_Fp(uint256 a) internal view returns (bool) {
        uint256 x = exp(a, EXP_SQRT_FP);
        return mulmod(x, x, P) == a;
    }

    /// Square root in Fp2.
    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is
    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.
    /// @notice Will revert with InvalidProof() if
    ///   * the input is not a square,
    ///   * the hint is incorrect, or
    ///   * the input coefficents are not reduced.
    /// @param a0 The real part of the input.
    /// @param a1 The imaginary part of the input.
    /// @param hint A hint which of two possible signs to pick in the equation.
    /// @return x0 The real part of the square root.
    /// @return x1 The imaginary part of the square root.
    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {
        // If this square root reverts there is no solution in Fp2.
        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));
        if (hint) {
            d = negate(d);
        }
        // If this square root reverts there is no solution in Fp2.
        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));
        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);

        // Check result to make sure we found a root.
        // Note: this also fails if a0 or a1 is not reduced.
        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P)
        ||  a1 != mulmod(2, mulmod(x0, x1, P), P)) {
            revert ProofInvalid();
        }
    }

    /// Compress a G1 point.
    /// @notice Reverts with InvalidProof if the coordinates are not reduced
    /// or if the point is not on the curve.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param x The X coordinate in Fp.
    /// @param y The Y coordinate in Fp.
    /// @return c The compresed point (x with one signal bit).
    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {
        if (x >= P || y >= P) {
            // G1 point not in field.
            revert ProofInvalid();
        }
        if (x == 0 && y == 0) {
            // Point at infinity
            return 0;
        }
        
        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.
        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (y == y_pos) {
            return (x << 1) | 0;
        } else if (y == negate(y_pos)) {
            return (x << 1) | 1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G1 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param c The compresed point (x with one signal bit).
    /// @return x The X coordinate in Fp.
    /// @return y The Y coordinate in Fp.
    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {
        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.
        // so we can use it to represent the point at infinity.
        if (c == 0) {
            // Point at infinity as encoded in EIP196 and EIP197.
            return (0, 0);
        }
        bool negate_point = c & 1 == 1;
        x = c >> 1;
        if (x >= P) {
            // G1 x coordinate not in field.
            revert ProofInvalid();
        }

        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore
        //       y can not be zero.
        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.
        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (negate_point) {
            y = negate(y);
        }
    }

    /// Compress a G2 point.
    /// @notice Reverts with InvalidProof if the coefficients are not reduced
    /// or if the point is not on the curve.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i). 
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param x0 The real part of the X coordinate.
    /// @param x1 The imaginary poart of the X coordinate.
    /// @param y0 The real part of the Y coordinate.
    /// @param y1 The imaginary part of the Y coordinate.
    /// @return c0 The first half of the compresed point (x0 with two signal bits).
    /// @return c1 The second half of the compressed point (x1 unmodified).
    function compress_g2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)
    internal view returns (uint256 c0, uint256 c1) {
        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {
            // G2 point not in field.
            revert ProofInvalid();
        }
        if ((x0 | x1 | y0 | y1) == 0) {
            // Point at infinity
            return (0, 0);
        }

        // Compute y^2
        // Note: shadowing variables and scoping to avoid stack-to-deep.
        uint256 y0_pos;
        uint256 y1_pos;
        {
            uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);
            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
            y1_pos = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));
        }

        // Determine hint bit
        // If this sqrt fails the x coordinate is not on the curve.
        bool hint;
        {
            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));
            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));
        }

        // Recover y
        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);
        if (y0 == y0_pos && y1 == y1_pos) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 0;
            c1 = x1;
        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 1;
            c1 = x1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G2 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i). 
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param c0 The first half of the compresed point (x0 with two signal bits).
    /// @param c1 The second half of the compressed point (x1 unmodified).
    /// @return x0 The real part of the X coordinate.
    /// @return x1 The imaginary poart of the X coordinate.
    /// @return y0 The real part of the Y coordinate.
    /// @return y1 The imaginary part of the Y coordinate.
    function decompress_g2(uint256 c0, uint256 c1)
    internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {
        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.
        // so we can use it to represent the point at infinity.
        if (c0 == 0 && c1 == 0) {
            // Point at infinity as encoded in EIP197.
            return (0, 0, 0, 0);
        }
        bool negate_point = c0 & 1 == 1;
        bool hint = c0 & 2 == 2;
        x0 = c0 >> 2;
        x1 = c1;
        if (x0 >= P || x1 >= P) {
            // G2 x0 or x1 coefficient not in field.
            revert ProofInvalid();
        }

        uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);

        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
        y1 = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));

        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.
        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.
        //       But y0 or y1 may still independently be zero.
        (y0, y1) = sqrt_Fp2(y0, y1, hint);
        if (negate_point) {
            y0 = negate(y0);
            y1 = negate(y1);
        }
    }

    /// Compute the public input linear combination.
    /// @notice Reverts with PublicInputNotInField if the input is not in the field.
    /// @notice Computes the multi-scalar-multiplication of the public input
    /// elements and the verification key including the constant term.
    /// @param input The public inputs. These are elements of the scalar field Fr.
    /// @return x The X coordinate of the resulting G1 point.
    /// @return y The Y coordinate of the resulting G1 point.
    function publicInputMSM(uint256[128] calldata input)
    internal view returns (uint256 x, uint256 y) {
        // Note: The ECMUL precompile does not reject unreduced values, so we check this.
        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the
        //       code-size is in the PUB_ constants.
        // ECMUL has input (x, y, scalar) and output (x', y').
        // ECADD has input (x1, y1, x2, y2) and output (x', y').
        // We call them such that ecmul output is already in the second point
        // argument to ECADD so we can have a tight loop.
        bool success = true;
        assembly {
            let f := mload(0x40)
            let g := add(f, 0x40)
            let s
            mstore(f, CONSTANT_X)
            mstore(add(f, 0x20), CONSTANT_Y)
            mstore(g, PUB_0_X)
            mstore(add(g, 0x20), PUB_0_Y)
            s :=  calldataload(input)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_1_X)
            mstore(add(g, 0x20), PUB_1_Y)
            s :=  calldataload(add(input, 32))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_2_X)
            mstore(add(g, 0x20), PUB_2_Y)
            s :=  calldataload(add(input, 64))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_3_X)
            mstore(add(g, 0x20), PUB_3_Y)
            s :=  calldataload(add(input, 96))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_4_X)
            mstore(add(g, 0x20), PUB_4_Y)
            s :=  calldataload(add(input, 128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_5_X)
            mstore(add(g, 0x20), PUB_5_Y)
            s :=  calldataload(add(input, 160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_6_X)
            mstore(add(g, 0x20), PUB_6_Y)
            s :=  calldataload(add(input, 192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_7_X)
            mstore(add(g, 0x20), PUB_7_Y)
            s :=  calldataload(add(input, 224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_8_X)
            mstore(add(g, 0x20), PUB_8_Y)
            s :=  calldataload(add(input, 256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_9_X)
            mstore(add(g, 0x20), PUB_9_Y)
            s :=  calldataload(add(input, 288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_10_X)
            mstore(add(g, 0x20), PUB_10_Y)
            s :=  calldataload(add(input, 320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_11_X)
            mstore(add(g, 0x20), PUB_11_Y)
            s :=  calldataload(add(input, 352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_12_X)
            mstore(add(g, 0x20), PUB_12_Y)
            s :=  calldataload(add(input, 384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_13_X)
            mstore(add(g, 0x20), PUB_13_Y)
            s :=  calldataload(add(input, 416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_14_X)
            mstore(add(g, 0x20), PUB_14_Y)
            s :=  calldataload(add(input, 448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_15_X)
            mstore(add(g, 0x20), PUB_15_Y)
            s :=  calldataload(add(input, 480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_16_X)
            mstore(add(g, 0x20), PUB_16_Y)
            s :=  calldataload(add(input, 512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_17_X)
            mstore(add(g, 0x20), PUB_17_Y)
            s :=  calldataload(add(input, 544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_18_X)
            mstore(add(g, 0x20), PUB_18_Y)
            s :=  calldataload(add(input, 576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_19_X)
            mstore(add(g, 0x20), PUB_19_Y)
            s :=  calldataload(add(input, 608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_20_X)
            mstore(add(g, 0x20), PUB_20_Y)
            s :=  calldataload(add(input, 640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_21_X)
            mstore(add(g, 0x20), PUB_21_Y)
            s :=  calldataload(add(input, 672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_22_X)
            mstore(add(g, 0x20), PUB_22_Y)
            s :=  calldataload(add(input, 704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_23_X)
            mstore(add(g, 0x20), PUB_23_Y)
            s :=  calldataload(add(input, 736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_24_X)
            mstore(add(g, 0x20), PUB_24_Y)
            s :=  calldataload(add(input, 768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_25_X)
            mstore(add(g, 0x20), PUB_25_Y)
            s :=  calldataload(add(input, 800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_26_X)
            mstore(add(g, 0x20), PUB_26_Y)
            s :=  calldataload(add(input, 832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_27_X)
            mstore(add(g, 0x20), PUB_27_Y)
            s :=  calldataload(add(input, 864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_28_X)
            mstore(add(g, 0x20), PUB_28_Y)
            s :=  calldataload(add(input, 896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_29_X)
            mstore(add(g, 0x20), PUB_29_Y)
            s :=  calldataload(add(input, 928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_30_X)
            mstore(add(g, 0x20), PUB_30_Y)
            s :=  calldataload(add(input, 960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_31_X)
            mstore(add(g, 0x20), PUB_31_Y)
            s :=  calldataload(add(input, 992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_32_X)
            mstore(add(g, 0x20), PUB_32_Y)
            s :=  calldataload(add(input, 1024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_33_X)
            mstore(add(g, 0x20), PUB_33_Y)
            s :=  calldataload(add(input, 1056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_34_X)
            mstore(add(g, 0x20), PUB_34_Y)
            s :=  calldataload(add(input, 1088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_35_X)
            mstore(add(g, 0x20), PUB_35_Y)
            s :=  calldataload(add(input, 1120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_36_X)
            mstore(add(g, 0x20), PUB_36_Y)
            s :=  calldataload(add(input, 1152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_37_X)
            mstore(add(g, 0x20), PUB_37_Y)
            s :=  calldataload(add(input, 1184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_38_X)
            mstore(add(g, 0x20), PUB_38_Y)
            s :=  calldataload(add(input, 1216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_39_X)
            mstore(add(g, 0x20), PUB_39_Y)
            s :=  calldataload(add(input, 1248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_40_X)
            mstore(add(g, 0x20), PUB_40_Y)
            s :=  calldataload(add(input, 1280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_41_X)
            mstore(add(g, 0x20), PUB_41_Y)
            s :=  calldataload(add(input, 1312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_42_X)
            mstore(add(g, 0x20), PUB_42_Y)
            s :=  calldataload(add(input, 1344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_43_X)
            mstore(add(g, 0x20), PUB_43_Y)
            s :=  calldataload(add(input, 1376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_44_X)
            mstore(add(g, 0x20), PUB_44_Y)
            s :=  calldataload(add(input, 1408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_45_X)
            mstore(add(g, 0x20), PUB_45_Y)
            s :=  calldataload(add(input, 1440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_46_X)
            mstore(add(g, 0x20), PUB_46_Y)
            s :=  calldataload(add(input, 1472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_47_X)
            mstore(add(g, 0x20), PUB_47_Y)
            s :=  calldataload(add(input, 1504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_48_X)
            mstore(add(g, 0x20), PUB_48_Y)
            s :=  calldataload(add(input, 1536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_49_X)
            mstore(add(g, 0x20), PUB_49_Y)
            s :=  calldataload(add(input, 1568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_50_X)
            mstore(add(g, 0x20), PUB_50_Y)
            s :=  calldataload(add(input, 1600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_51_X)
            mstore(add(g, 0x20), PUB_51_Y)
            s :=  calldataload(add(input, 1632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_52_X)
            mstore(add(g, 0x20), PUB_52_Y)
            s :=  calldataload(add(input, 1664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_53_X)
            mstore(add(g, 0x20), PUB_53_Y)
            s :=  calldataload(add(input, 1696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_54_X)
            mstore(add(g, 0x20), PUB_54_Y)
            s :=  calldataload(add(input, 1728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_55_X)
            mstore(add(g, 0x20), PUB_55_Y)
            s :=  calldataload(add(input, 1760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_56_X)
            mstore(add(g, 0x20), PUB_56_Y)
            s :=  calldataload(add(input, 1792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_57_X)
            mstore(add(g, 0x20), PUB_57_Y)
            s :=  calldataload(add(input, 1824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_58_X)
            mstore(add(g, 0x20), PUB_58_Y)
            s :=  calldataload(add(input, 1856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_59_X)
            mstore(add(g, 0x20), PUB_59_Y)
            s :=  calldataload(add(input, 1888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_60_X)
            mstore(add(g, 0x20), PUB_60_Y)
            s :=  calldataload(add(input, 1920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_61_X)
            mstore(add(g, 0x20), PUB_61_Y)
            s :=  calldataload(add(input, 1952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_62_X)
            mstore(add(g, 0x20), PUB_62_Y)
            s :=  calldataload(add(input, 1984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_63_X)
            mstore(add(g, 0x20), PUB_63_Y)
            s :=  calldataload(add(input, 2016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_64_X)
            mstore(add(g, 0x20), PUB_64_Y)
            s :=  calldataload(add(input, 2048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_65_X)
            mstore(add(g, 0x20), PUB_65_Y)
            s :=  calldataload(add(input, 2080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_66_X)
            mstore(add(g, 0x20), PUB_66_Y)
            s :=  calldataload(add(input, 2112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_67_X)
            mstore(add(g, 0x20), PUB_67_Y)
            s :=  calldataload(add(input, 2144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_68_X)
            mstore(add(g, 0x20), PUB_68_Y)
            s :=  calldataload(add(input, 2176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_69_X)
            mstore(add(g, 0x20), PUB_69_Y)
            s :=  calldataload(add(input, 2208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_70_X)
            mstore(add(g, 0x20), PUB_70_Y)
            s :=  calldataload(add(input, 2240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_71_X)
            mstore(add(g, 0x20), PUB_71_Y)
            s :=  calldataload(add(input, 2272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_72_X)
            mstore(add(g, 0x20), PUB_72_Y)
            s :=  calldataload(add(input, 2304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_73_X)
            mstore(add(g, 0x20), PUB_73_Y)
            s :=  calldataload(add(input, 2336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_74_X)
            mstore(add(g, 0x20), PUB_74_Y)
            s :=  calldataload(add(input, 2368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_75_X)
            mstore(add(g, 0x20), PUB_75_Y)
            s :=  calldataload(add(input, 2400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_76_X)
            mstore(add(g, 0x20), PUB_76_Y)
            s :=  calldataload(add(input, 2432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_77_X)
            mstore(add(g, 0x20), PUB_77_Y)
            s :=  calldataload(add(input, 2464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_78_X)
            mstore(add(g, 0x20), PUB_78_Y)
            s :=  calldataload(add(input, 2496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_79_X)
            mstore(add(g, 0x20), PUB_79_Y)
            s :=  calldataload(add(input, 2528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_80_X)
            mstore(add(g, 0x20), PUB_80_Y)
            s :=  calldataload(add(input, 2560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_81_X)
            mstore(add(g, 0x20), PUB_81_Y)
            s :=  calldataload(add(input, 2592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_82_X)
            mstore(add(g, 0x20), PUB_82_Y)
            s :=  calldataload(add(input, 2624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_83_X)
            mstore(add(g, 0x20), PUB_83_Y)
            s :=  calldataload(add(input, 2656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_84_X)
            mstore(add(g, 0x20), PUB_84_Y)
            s :=  calldataload(add(input, 2688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_85_X)
            mstore(add(g, 0x20), PUB_85_Y)
            s :=  calldataload(add(input, 2720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_86_X)
            mstore(add(g, 0x20), PUB_86_Y)
            s :=  calldataload(add(input, 2752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_87_X)
            mstore(add(g, 0x20), PUB_87_Y)
            s :=  calldataload(add(input, 2784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_88_X)
            mstore(add(g, 0x20), PUB_88_Y)
            s :=  calldataload(add(input, 2816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_89_X)
            mstore(add(g, 0x20), PUB_89_Y)
            s :=  calldataload(add(input, 2848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_90_X)
            mstore(add(g, 0x20), PUB_90_Y)
            s :=  calldataload(add(input, 2880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_91_X)
            mstore(add(g, 0x20), PUB_91_Y)
            s :=  calldataload(add(input, 2912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_92_X)
            mstore(add(g, 0x20), PUB_92_Y)
            s :=  calldataload(add(input, 2944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_93_X)
            mstore(add(g, 0x20), PUB_93_Y)
            s :=  calldataload(add(input, 2976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_94_X)
            mstore(add(g, 0x20), PUB_94_Y)
            s :=  calldataload(add(input, 3008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_95_X)
            mstore(add(g, 0x20), PUB_95_Y)
            s :=  calldataload(add(input, 3040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_96_X)
            mstore(add(g, 0x20), PUB_96_Y)
            s :=  calldataload(add(input, 3072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_97_X)
            mstore(add(g, 0x20), PUB_97_Y)
            s :=  calldataload(add(input, 3104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_98_X)
            mstore(add(g, 0x20), PUB_98_Y)
            s :=  calldataload(add(input, 3136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_99_X)
            mstore(add(g, 0x20), PUB_99_Y)
            s :=  calldataload(add(input, 3168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_100_X)
            mstore(add(g, 0x20), PUB_100_Y)
            s :=  calldataload(add(input, 3200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_101_X)
            mstore(add(g, 0x20), PUB_101_Y)
            s :=  calldataload(add(input, 3232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_102_X)
            mstore(add(g, 0x20), PUB_102_Y)
            s :=  calldataload(add(input, 3264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_103_X)
            mstore(add(g, 0x20), PUB_103_Y)
            s :=  calldataload(add(input, 3296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_104_X)
            mstore(add(g, 0x20), PUB_104_Y)
            s :=  calldataload(add(input, 3328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_105_X)
            mstore(add(g, 0x20), PUB_105_Y)
            s :=  calldataload(add(input, 3360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_106_X)
            mstore(add(g, 0x20), PUB_106_Y)
            s :=  calldataload(add(input, 3392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_107_X)
            mstore(add(g, 0x20), PUB_107_Y)
            s :=  calldataload(add(input, 3424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_108_X)
            mstore(add(g, 0x20), PUB_108_Y)
            s :=  calldataload(add(input, 3456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_109_X)
            mstore(add(g, 0x20), PUB_109_Y)
            s :=  calldataload(add(input, 3488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_110_X)
            mstore(add(g, 0x20), PUB_110_Y)
            s :=  calldataload(add(input, 3520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_111_X)
            mstore(add(g, 0x20), PUB_111_Y)
            s :=  calldataload(add(input, 3552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_112_X)
            mstore(add(g, 0x20), PUB_112_Y)
            s :=  calldataload(add(input, 3584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_113_X)
            mstore(add(g, 0x20), PUB_113_Y)
            s :=  calldataload(add(input, 3616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_114_X)
            mstore(add(g, 0x20), PUB_114_Y)
            s :=  calldataload(add(input, 3648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_115_X)
            mstore(add(g, 0x20), PUB_115_Y)
            s :=  calldataload(add(input, 3680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_116_X)
            mstore(add(g, 0x20), PUB_116_Y)
            s :=  calldataload(add(input, 3712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_117_X)
            mstore(add(g, 0x20), PUB_117_Y)
            s :=  calldataload(add(input, 3744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_118_X)
            mstore(add(g, 0x20), PUB_118_Y)
            s :=  calldataload(add(input, 3776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_119_X)
            mstore(add(g, 0x20), PUB_119_Y)
            s :=  calldataload(add(input, 3808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_120_X)
            mstore(add(g, 0x20), PUB_120_Y)
            s :=  calldataload(add(input, 3840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_121_X)
            mstore(add(g, 0x20), PUB_121_Y)
            s :=  calldataload(add(input, 3872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_122_X)
            mstore(add(g, 0x20), PUB_122_Y)
            s :=  calldataload(add(input, 3904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_123_X)
            mstore(add(g, 0x20), PUB_123_Y)
            s :=  calldataload(add(input, 3936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_124_X)
            mstore(add(g, 0x20), PUB_124_Y)
            s :=  calldataload(add(input, 3968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_125_X)
            mstore(add(g, 0x20), PUB_125_Y)
            s :=  calldataload(add(input, 4000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_126_X)
            mstore(add(g, 0x20), PUB_126_Y)
            s :=  calldataload(add(input, 4032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_127_X)
            mstore(add(g, 0x20), PUB_127_Y)
            s :=  calldataload(add(input, 4064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            x := mload(f)
            y := mload(add(f, 0x20))
        }
        if (!success) {
            // Either Public input not in field, or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert PublicInputNotInField();
        }
    }

    /// Compress a proof.
    /// @notice Will revert with InvalidProof if the curve points are invalid,
    /// but does not verify the proof itself.
    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for
    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.
    /// @return compressed The compressed proof. Elements are in the same order as for
    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.
    function compressProof(uint256[8] calldata proof)
    public view returns (uint256[4] memory compressed) {
        compressed[0] = compress_g1(proof[0], proof[1]);
        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);
        compressed[3] = compress_g1(proof[6], proof[7]);
    }

    /// Verify a Groth16 proof with compressed points.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param compressedProof the points (A, B, C) in compressed format
    /// matching the output of compressProof.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyCompressedProof(
        uint256[4] calldata compressedProof,
        uint256[128] calldata input
    ) public view {
        (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);
        (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(
                compressedProof[2], compressedProof[1]);
        (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);
        (uint256 Lx, uint256 Ly) = publicInputMSM(input);

        // Verify the pairing
        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        uint256[24] memory pairings;
        // e(A, B)
        pairings[ 0] = Ax;
        pairings[ 1] = Ay;
        pairings[ 2] = Bx1;
        pairings[ 3] = Bx0;
        pairings[ 4] = By1;
        pairings[ 5] = By0;
        // e(C, -δ)
        pairings[ 6] = Cx;
        pairings[ 7] = Cy;
        pairings[ 8] = DELTA_NEG_X_1;
        pairings[ 9] = DELTA_NEG_X_0;
        pairings[10] = DELTA_NEG_Y_1;
        pairings[11] = DELTA_NEG_Y_0;
        // e(α, -β)
        pairings[12] = ALPHA_X;
        pairings[13] = ALPHA_Y;
        pairings[14] = BETA_NEG_X_1;
        pairings[15] = BETA_NEG_X_0;
        pairings[16] = BETA_NEG_Y_1;
        pairings[17] = BETA_NEG_Y_0;
        // e(L_pub, -γ)
        pairings[18] = Lx;
        pairings[19] = Ly;
        pairings[20] = GAMMA_NEG_X_1;
        pairings[21] = GAMMA_NEG_X_0;
        pairings[22] = GAMMA_NEG_Y_1;
        pairings[23] = GAMMA_NEG_Y_0;

        // Check pairing equation.
        bool success;
        uint256[1] memory output;
        assembly {
            success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)
        }
        if (!success || output[0] != 1) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }

    /// Verify an uncompressed Groth16 proof.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param proof the points (A, B, C) in EIP-197 format matching the output
    /// of compressProof.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyProof(
        uint256[8] calldata proof,
        uint256[128] calldata input
    ) public view {
        (uint256 x, uint256 y) = publicInputMSM(input);

        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        
        bool success;
        assembly {
            let f := mload(0x40) // Free memory pointer.

            // Copy points (A, B, C) to memory. They are already in correct encoding.
            // This is pairing e(A, B) and G1 of e(C, -δ).
            calldatacopy(f, proof, 0x100)

            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.
            // OPT: This could be better done using a single codecopy, but
            //      Solidity (unlike standalone Yul) doesn't provide a way to
            //      to do this.
            mstore(add(f, 0x100), DELTA_NEG_X_1)
            mstore(add(f, 0x120), DELTA_NEG_X_0)
            mstore(add(f, 0x140), DELTA_NEG_Y_1)
            mstore(add(f, 0x160), DELTA_NEG_Y_0)
            mstore(add(f, 0x180), ALPHA_X)
            mstore(add(f, 0x1a0), ALPHA_Y)
            mstore(add(f, 0x1c0), BETA_NEG_X_1)
            mstore(add(f, 0x1e0), BETA_NEG_X_0)
            mstore(add(f, 0x200), BETA_NEG_Y_1)
            mstore(add(f, 0x220), BETA_NEG_Y_0)
            mstore(add(f, 0x240), x)
            mstore(add(f, 0x260), y)
            mstore(add(f, 0x280), GAMMA_NEG_X_1)
            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)
            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)
            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)

            // Check pairing equation.
            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)
            // Also check returned value (both are either 1 or 0).
            success := and(success, mload(f))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}
