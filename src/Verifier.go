// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50611af98061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806343753b4d1461002d575b5f80fd5b61004760048036038101906100429190611395565b61005d565b6040516100549190611415565b60405180910390f35b5f61006661100f565b6040518060400160405280875f600281106100845761008361142e565b5b60200201518152602001876001600281106100a2576100a161142e565b5b6020020151815250815f018190525060405180604001604052806040518060400160405280885f600281106100da576100d961142e565b5b60200201515f600281106100f1576100f061142e565b5b60200201518152602001885f6002811061010e5761010d61142e565b5b60200201516001600281106101265761012561142e565b5b602002015181525081526020016040518060400160405280886001600281106101525761015161142e565b5b60200201515f600281106101695761016861142e565b5b60200201518152602001886001600281106101875761018661142e565b5b602002015160016002811061019f5761019e61142e565b5b602002015181525081525081602001819052506040518060400160405280855f600281106101d0576101cf61142e565b5b60200201518152602001856001600281106101ee576101ed61142e565b5b602002015181525081604001819052507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47815f01515f015110610266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025d906114b5565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47815f015160200151106102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c69061151d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781602001515f01515f6002811061030a5761030961142e565b5b60200201511061034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034690611585565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478160200151602001515f6002811061038b5761038a61142e565b5b6020020151106103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906115ed565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781602001515f015160016002811061040c5761040b61142e565b5b602002015110610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890611655565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781602001516020015160016002811061048e5761048d61142e565b5b6020020151106104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca906116bd565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781604001515f01511061053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390611725565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47816040015160200151106105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d9061178d565b60405180910390fd5b5f5b600181101561063d577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018482600181106105e5576105e461142e565b5b60200201351061062a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610621906117f5565b60405180910390fd5b808061063590611840565b9150506105a8565b505f6106476107da565b90505f60405180604001604052805f81526020015f8152509050610669611042565b610671611064565b5f60405180604001604052805f81526020015f81525090507f0c24f51670ad0a51bea08983056faef810a0b0d0d615cb0280433e0a98ffdd00845f0181815250507f0d989fc55ebfaf2a26e63f5562fb1306d83ea6658b4f362583759870a4f0e40f8460200181815250507f145488caf25daef562f1e926ece7cadfd918435688fe75ae8958f7a46d3bc62a825f600381106107105761070f61142e565b5b6020020181815250507f1583c23398330883434ac6a5e6bb02360ef6c7089ce40062eec43ce9279d7bea8260016003811061074e5761074d61142e565b5b602002018181525050875f6001811061076a5761076961142e565b5b6020020135826002600381106107835761078261142e565b5b60200201818152505061079882828587610a90565b6107ca6107a7875f0151610b2f565b8760200151875f01518860200151888a604001518c604001518c60600151610be7565b9650505050505050949350505050565b6107e2611086565b60405180604001604052807f2cefd03a1ea957276bd14ee88658017c3e86008216e1d7e59b42ad335597257681526020017f13e869c21bbdfc0efd4faf3c13ce2cf50f89779570555207576c4fd6f61acf46815250815f0181905250604051806040016040528060405180604001604052807f271aa0da9e551493db2dff139724d9c812f86ca34547fbc73a02b088cd38a54981526020017f083065a3d35662e5fa8e2ee6ad0f6effab6c855620e1dbf5e8950171fbef8853815250815260200160405180604001604052807f2a2a63d5b42778c72d078a81bfddc21aa4c8fc74547ff3dcb1f54f2438d4f52681526020017f28587ce280bcd0a65e09eea5e3427d73f55203f2d52264fce5c036ae1bdff5ae8152508152508160200181905250604051806040016040528060405180604001604052807f1ff9f6ceca7be1db8fa7e2263a27867c172880d4d755e1cfde0fcdc1d11f307881526020017f092101cffa73d5b2ae21cac9dd9a3c0f08d7e81054b42e24f3c5b9991bb42e03815250815260200160405180604001604052807f216aa1760e3e07a274987afbc87feb9d1a51d2f4e41257735da3f5e4e2bdc01281526020017f139f88c2668b61bbfdff3a22aae408b9ffd90c6a6cbbbf661b5c36a0abb10b768152508152508160400181905250604051806040016040528060405180604001604052807f0c65428322ce81b61bf123feba2fd44dd8e7ca012f153fc9137b7ec5bebbe23b81526020017f19bcb757936470aa3e7728482acb56add604d77de3fe07c446e083a26dd898cf815250815260200160405180604001604052807f220b762ffdbe43b12fe08056bfe2a8ae6dc277f7aa4e2fe816c69806ec4604fa81526020017f0ba519fef583135816b553ec7eb4c69136b60bb7d2c07295a8e33e090b7c1f9b815250815250816060018190525090565b610a9a8484610f4d565b805f0151825f60048110610ab157610ab061142e565b5b602002018181525050806020015182600160048110610ad357610ad261142e565b5b602002018181525050825f015182600260048110610af457610af361142e565b5b602002018181525050826020015182600360048110610b1657610b1561142e565b5b602002018181525050610b298282610fae565b50505050565b610b376110c6565b5f825f0151148015610b4c57505f8260200151145b15610b6d5760405180604001604052805f81526020015f8152509050610be2565b6040518060400160405280835f015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610bb191906118b4565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610bdc91906118e4565b81525090505b919050565b5f8060405180608001604052808b81526020018981526020018781526020018581525090505f60405180608001604052808b81526020018981526020018781526020018581525090505f601890505f8167ffffffffffffffff811115610c5057610c4f611169565b5b604051908082528060200260200182016040528015610c7e5781602001602082028036833780820191505090505b5090505f5b6004811015610eb4575f600682610c9a9190611917565b9050858260048110610caf57610cae61142e565b5b60200201515f0151835f83610cc49190611958565b81518110610cd557610cd461142e565b5b602002602001018181525050858260048110610cf457610cf361142e565b5b60200201516020015183600183610d0b9190611958565b81518110610d1c57610d1b61142e565b5b602002602001018181525050848260048110610d3b57610d3a61142e565b5b60200201515f01515f60028110610d5557610d5461142e565b5b602002015183600283610d689190611958565b81518110610d7957610d7861142e565b5b602002602001018181525050848260048110610d9857610d9761142e565b5b60200201515f0151600160028110610db357610db261142e565b5b602002015183600383610dc69190611958565b81518110610dd757610dd661142e565b5b602002602001018181525050848260048110610df657610df561142e565b5b6020020151602001515f60028110610e1157610e1061142e565b5b602002015183600483610e249190611958565b81518110610e3557610e3461142e565b5b602002602001018181525050848260048110610e5457610e5361142e565b5b602002015160200151600160028110610e7057610e6f61142e565b5b602002015183600583610e839190611958565b81518110610e9457610e9361142e565b5b602002602001018181525050508080610eac90611840565b915050610c83565b50610ebd6110de565b5f602082602086026020860160086107d05a03fa9050805f8103610edd57fe5b5080610f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f15906119d5565b60405180910390fd5b5f825f60018110610f3257610f3161142e565b5b60200201511415965050505050505098975050505050505050565b5f60608260808560076107d05a03fa9050805f8103610f6857fe5b5080610fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa090611a3d565b60405180910390fd5b505050565b5f60608260c08560066107d05a03fa9050805f8103610fc957fe5b508061100a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100190611aa5565b60405180910390fd5b505050565b60405180606001604052806110226110c6565b815260200161102f611100565b815260200161103c6110c6565b81525090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b60405180608001604052806110996110c6565b81526020016110a6611100565b81526020016110b3611100565b81526020016110c0611100565b81525090565b60405180604001604052805f81526020015f81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280611113611126565b8152602001611120611126565b81525090565b6040518060400160405280600290602082028036833780820191505090505090565b5f604051905090565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61119f82611159565b810181811067ffffffffffffffff821117156111be576111bd611169565b5b80604052505050565b5f6111d0611148565b90506111dc8282611196565b919050565b5f67ffffffffffffffff8211156111fb576111fa611169565b5b602082029050919050565b5f80fd5b5f819050919050565b61121c8161120a565b8114611226575f80fd5b50565b5f8135905061123781611213565b92915050565b5f61124f61124a846111e1565b6111c7565b9050806020840283018581111561126957611268611206565b5b835b81811015611292578061127e8882611229565b84526020840193505060208101905061126b565b5050509392505050565b5f82601f8301126112b0576112af611155565b5b60026112bd84828561123d565b91505092915050565b5f67ffffffffffffffff8211156112e0576112df611169565b5b602082029050919050565b5f6112fd6112f8846112c6565b6111c7565b9050806040840283018581111561131757611316611206565b5b835b81811015611340578061132c888261129c565b845260208401935050604081019050611319565b5050509392505050565b5f82601f83011261135e5761135d611155565b5b600261136b8482856112eb565b91505092915050565b5f8190508260206001028201111561138f5761138e611206565b5b92915050565b5f805f8061012085870312156113ae576113ad611151565b5b5f6113bb8782880161129c565b94505060406113cc8782880161134a565b93505060c06113dd8782880161129c565b9250506101006113ef87828801611374565b91505092959194509250565b5f8115159050919050565b61140f816113fb565b82525050565b5f6020820190506114285f830184611406565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f76657269666965722d61582d6774652d7072696d652d710000000000000000005f82015250565b5f61149f60178361145b565b91506114aa8261146b565b602082019050919050565b5f6020820190508181035f8301526114cc81611493565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d710000000000000000005f82015250565b5f61150760178361145b565b9150611512826114d3565b602082019050919050565b5f6020820190508181035f830152611534816114fb565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d7100000000000000005f82015250565b5f61156f60188361145b565b915061157a8261153b565b602082019050919050565b5f6020820190508181035f83015261159c81611563565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d7100000000000000005f82015250565b5f6115d760188361145b565b91506115e2826115a3565b602082019050919050565b5f6020820190508181035f830152611604816115cb565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d7100000000000000005f82015250565b5f61163f60188361145b565b915061164a8261160b565b602082019050919050565b5f6020820190508181035f83015261166c81611633565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d7100000000000000005f82015250565b5f6116a760188361145b565b91506116b282611673565b602082019050919050565b5f6020820190508181035f8301526116d48161169b565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d710000000000000000005f82015250565b5f61170f60178361145b565b915061171a826116db565b602082019050919050565b5f6020820190508181035f83015261173c81611703565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d710000000000000000005f82015250565b5f61177760178361145b565b915061178282611743565b602082019050919050565b5f6020820190508181035f8301526117a48161176b565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64005f82015250565b5f6117df601f8361145b565b91506117ea826117ab565b602082019050919050565b5f6020820190508181035f83015261180c816117d3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61184a8261120a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361187c5761187b611813565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6118be8261120a565b91506118c98361120a565b9250826118d9576118d8611887565b5b828206905092915050565b5f6118ee8261120a565b91506118f98361120a565b925082820390508181111561191157611910611813565b5b92915050565b5f6119218261120a565b915061192c8361120a565b925082820261193a8161120a565b9150828204841483151761195157611950611813565b5b5092915050565b5f6119628261120a565b915061196d8361120a565b925082820190508082111561198557611984611813565b5b92915050565b7f70616972696e672d6f70636f64652d6661696c656400000000000000000000005f82015250565b5f6119bf60158361145b565b91506119ca8261198b565b602082019050919050565b5f6020820190508181035f8301526119ec816119b3565b9050919050565b7f70616972696e672d6d756c2d6661696c656400000000000000000000000000005f82015250565b5f611a2760128361145b565b9150611a32826119f3565b602082019050919050565b5f6020820190508181035f830152611a5481611a1b565b9050919050565b7f70616972696e672d6164642d6661696c656400000000000000000000000000005f82015250565b5f611a8f60128361145b565b9150611a9a82611a5b565b602082019050919050565b5f6020820190508181035f830152611abc81611a83565b905091905056fea26469706673582212207c739fe8d2e32b5494f38c8f2e12836e9b0247d9ebdc7bfd0eefa2e0d68afca464736f6c63430008150033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_Verifier *VerifierCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_Verifier *VerifierSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x43753b4d.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] input) view returns(bool r)
func (_Verifier *VerifierCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [1]*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, a, b, c, input)
}
